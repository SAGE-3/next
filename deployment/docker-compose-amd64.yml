services:
  traefik:
    image: traefik:v2
    container_name: traefik
    restart: always
    ports:
      - "443:443"  # HTTPS for secure traffic
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Allow Traefik to access Docker API
      - ./configurations/traefik:/etc/traefik
  redis-server:
    image: "redis/redis-stack-server:latest"
    volumes:
      - ./configurations/redis/data:/data
      - ./configurations/redis/conf:/conf
    ports:
      - "127.0.0.1:6379:6379"
    entrypoint: redis-server
    command: /conf/redis.conf
    deploy:
      restart_policy:
        condition: on-failure
  chromadb:
    image: "chromadb/chroma:0.5.16"
    ports:
      - "127.0.0.1:8100:8000"
    volumes:
      - ./configurations/chroma/data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider
      - CHROMA_SERVER_AUTHN_CREDENTIALS=${CHROMA_SERVER_AUTHN_CREDENTIALS}
    command: "--workers 1 --proxy-headers --port 8000 --host 0.0.0.0 --timeout-keep-alive 30"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      restart_policy:
        condition: on-failure
  node-server:
    image: "ghcr.io/sage-3/next:amd64"
    depends_on:
      - "redis-server"
      - "fluentd-server"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.node-server.rule=Host(`${SAGE3_SERVER}`)"
      - "traefik.http.routers.node-server.priority=100"
      - "traefik.http.routers.node-server.entrypoints=websecure"
      - "traefik.http.services.node-server.loadbalancer.server.port=3000"
      - "traefik.http.routers.node-server.middlewares=ws-headers"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.authheader.headers.accesscontrolallowheaders=Authorization,Content-Type"
      - "traefik.http.routers.node-server.middlewares=authheader"
    volumes:
      - ./configurations/node/keys:/app/keys
      - ./configurations/node/assets:/app/dist/apps/homebase/assets
      - ./configurations/node/plugins:/app/dist/apps/homebase/plugins
      - ./configurations/node/sage3-prod.hjson:/app/sage3-prod.hjson
    deploy:
      restart_policy:
        condition: on-failure
      replicas: ${NODE_SERVER_REPLICAS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
  yjs-server:
    image: "ghcr.io/sage-3/next_yjs:amd64"
    depends_on:
      - "redis-server"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.yjs-server.rule=Host(`${SAGE3_SERVER}`) && (PathPrefix(`/yjs`) || PathPrefix(`/rtc`))"
      - "traefik.http.routers.yjs-server.priority=200"
      - "traefik.http.routers.yjs-server.entrypoints=websecure"
      - "traefik.http.services.yjs-server.loadbalancer.server.port=3001"
      - "traefik.http.routers.yjs-server.middlewares=ws-headers"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.authheader.headers.accesscontrolallowheaders=Authorization,Content-Type"
      - "traefik.http.routers.yjs-server.middlewares=authheader"
    volumes:
      - ./configurations/node/keys:/app/keys
      - ./configurations/node/sage3-prod.hjson:/app/sage3-prod.hjson
    deploy:
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
  files-server:
    image: "ghcr.io/sage-3/next_files:amd64"
    depends_on:
      - "redis-server"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.files-server.rule=Host(`${SAGE3_SERVER}`) && (PathPrefix(`/api/assets/upload`) || PathPrefix(`/api/assets/static`) || PathPrefix(`/api/files`))"
      - "traefik.http.routers.files-server.priority=300"
      - "traefik.http.routers.files-server.entrypoints=websecure"
      - "traefik.http.services.files-server.loadbalancer.server.port=3002"
      - "traefik.http.middlewares.authheader.headers.accesscontrolallowheaders=Authorization,Content-Type"
      - "traefik.http.routers.files-server.middlewares=authheader"
    volumes:
      - ./configurations/node/keys:/app/keys
      - ./configurations/node/assets:/app/dist/apps/homebase/assets
      - ./configurations/node/sage3-prod.hjson:/app/sage3-prod.hjson
    deploy:
      restart_policy:
        condition: on-failure
      replicas: ${NODE_FILE_SERVER_REPLICAS}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
  fluentd-server:
    image: "fluent/fluentd:edge-debian"
    ports:
      - "127.0.0.1:24224:24224"
    volumes:
      - ./configurations/fluentd/log:/fluentd/log
      - ./configurations/fluentd/conf:/fluentd/etc
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
  kernelserver:
    image: "ghcr.io/sage-3/sagekernelserver:amd64"
    ports:
      - "127.0.0.1:8000:8000"
    environment:
      - ENVIRONMENT=production
      - SAGE3_SERVER=${SAGE3_SERVER}
      - TOKEN=${TOKEN}
    restart: always
    working_dir: /app
    command: python src/main.py --url http://jupyter:8888
    depends_on:
      node-server:
        condition: service_healthy
      jupyter:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/heartbeat"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      restart_policy:
        condition: on-failure
  seer:
    image: "ghcr.io/sage-3/agents:amd64"
    ports:
      - "127.0.0.1:9999:9999"
    environment:
      - ENVIRONMENT=production
      - SAGE3_SERVER=${SAGE3_SERVER}
      - TOKEN=${TOKEN}
      - CHROMA_SERVER_AUTHN_PROVIDER=chromadb.auth.basic_authn.BasicAuthenticationServerProvider
      - CHROMA_CLIENT_AUTH_CREDENTIALS=${CHROMA_CLIENT_AUTH_CREDENTIALS}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9999/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    depends_on:
      chromadb:
        condition: service_healthy
    deploy:
      restart_policy:
        condition: on-failure
  jupyter:
    image: "quay.io/jupyter/datascience-notebook:2024-05-27"
    volumes:
      - ./configurations/jupyter/conf:/conf
      - ./configurations/jupyter/notebooks:/home/jovyan/notebooks
      - ./redis-client:/home/jovyan/work
    ports:
      - "127.0.0.1:8888:8888"
    environment:
      - ENVIRONMENT=production
      - SAGE3_SERVER=${SAGE3_SERVER}
      - TOKEN=${TOKEN}
    depends_on:
      - "redis-server"
    command: /conf/start.sh
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 30s
    deploy:
      restart_policy:
        condition: on-failure
