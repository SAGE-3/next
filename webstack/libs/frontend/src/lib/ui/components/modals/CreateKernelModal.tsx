/**
 * Copyright (c) SAGE3 Development Team 2022. All Rights Reserved
 * University of Hawaii, University of Illinois Chicago, Virginia Tech
 *
 * Distributed under the terms of the SAGE3 License.  The full license is in
 * the file LICENSE, distributed as part of this software.
 */

import { useState, useRef } from 'react';
import { useParams } from 'react-router';
import {
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  Input,
  useToast,
  Button,
  Checkbox,
  Select,
  Spacer,
} from '@chakra-ui/react';

import { KernelInfo } from '@sage3/shared/types';

import { useKernelStore } from '../../../stores';
import { useUser } from '../../../providers';

interface CreateKernelModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const availableKernelTypes = ['python3'];

export function CreateKernelModal(props: CreateKernelModalProps): JSX.Element {
  // Params
  const { boardId, roomId } = useParams();

  // Checkbox private selection
  const [isPrivate, setIsPrivate] = useState(false);
  const [kernelAlias, setKernelAlias] = useState<string>('');
  const [kernelName, setKernelName] = useState<string>('python3');

  // User Info
  const { user } = useUser();

  // Kernel Store
  const { kernelTypes, apiStatus, createKernel } = useKernelStore((state) => state);
  const kernelTypeFilter = (kernel: string) => availableKernelTypes.includes(kernel);

  // Toast
  const toast = useToast();

  // When the modal panel opens, select the input element
  const initialRef = useRef<HTMLInputElement>(null);

  /**
   *
   * Add a kernel to the list of kernels by sending a request to the backend
   * and updating the state. Defaults to python3 kernel. Expects a kernel alias
   * and a kernel name.
   *
   * @returns  void
   */
  const hanldeCreateKernel = async () => {
    if (!user || !apiStatus) {
      toast({
        title: 'Error',
        description: 'Kernel API is down',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    }
    const kernelInfo = {
      kernel_id: '', // will be generated by the backend
      room: roomId,
      board: boardId,
      name: kernelName,
      alias: kernelAlias,
      is_private: isPrivate,
      owner: user?._id,
    } as KernelInfo;

    const response = await createKernel(kernelInfo);

    toast({
      title: response ? 'Kernel Created' : 'Kernel Creation Failed',
      description: response ? 'Kernel created successfully' : 'Kernel creation failed',
      status: response ? 'success' : 'error',
      duration: 3000,
      isClosable: true,
    });

    if (response) {
      props.onClose();
    }
  };

  // Triggered on every keystroke
  function changeAlias(e: React.ChangeEvent<HTMLInputElement>) {
    const cleanAlias = e.target.value.replace(/[^a-zA-Z0-9\-_]/g, '');
    setKernelAlias(cleanAlias);
  }

  // Keyboard handler: press enter to activate command
  const onSubmit = (e: React.KeyboardEvent) => {
    // Keyboard instead of pressing the button
    if (e.key === 'Enter') {
      hanldeCreateKernel();
    }
  };

  return (
    <Modal isCentered isOpen={props.isOpen} onClose={props.onClose} blockScrollOnMount={false} initialFocusRef={initialRef}>
      <ModalOverlay />
      <ModalContent>
        <ModalHeader>Create New Kernel</ModalHeader>
        <ModalBody>
          Type
          <Select
            size="md"
            value={kernelName}
            placeholder="Select Kernel Type"
            width="100%"
            onChange={(e) => {
              setKernelName(e.target.value);
            }}
            mt="1"
          >
            {kernelTypes.length > 0 ? (
              kernelTypes.filter(kernelTypeFilter).map((kernel) => (
                <option key={kernel} value={kernel}>
                  {kernel}
                </option>
              ))
            ) : (
              <option value="" disabled>
                No kernels available
              </option>
            )}
          </Select>
          <Spacer my="4" />
          Alias
          <Input
            placeholder="Enter kernel alias..."
            _placeholder={{ opacity: 1, color: 'gray.600' }}
            variant="outline"
            size="md"
            mt="1"
            ref={initialRef}
            value={kernelAlias}
            onChange={changeAlias}
            onPaste={(event) => {
              event.stopPropagation();
            }}
            onKeyDown={onSubmit}
          />
          <Spacer my="4" />
          Private
          <Checkbox
            checked={isPrivate}
            borderRadius={2}
            verticalAlign={'middle'}
            colorScheme="teal"
            p={0}
            ml={1}
            onChange={() => setIsPrivate(!isPrivate)}
          />
        </ModalBody>

        <ModalFooter>
          <Button colorScheme="red" mr="2" onClick={props.onClose}>
            Cancel
          </Button>
          <Button colorScheme="teal" onClick={hanldeCreateKernel} isDisabled={kernelAlias.length === 0}>
            Create
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
}
