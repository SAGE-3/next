/**
 * Copyright (c) SAGE3 Development Team 2023. All Rights Reserved
 * University of Hawaii, University of Illinois Chicago, Virginia Tech
 *
 * Distributed under the terms of the SAGE3 License.  The full license is in
 * the file LICENSE, distributed as part of this software.
 */

import { useEffect, useState } from 'react';
import {
  Button,
  ButtonGroup,
  Checkbox,
  HStack,
  Input,
  Modal,
  ModalBody,
  ModalContent,
  ModalFooter,
  ModalHeader,
  ModalOverlay,
  Select,
  Spacer,
  Tooltip,
  useDisclosure,
  useToast,
} from '@chakra-ui/react';
import { MdRefresh } from 'react-icons/md';
import { App } from '../../../schema';
import { useAppStore, useUser } from '@sage3/frontend';
import { state as AppState } from '../index';

const fastApiRoute = '/api/fastapi';

/**
 * UI toolbar for the KernelDashboard application
 *
 * @param {App} props
 * @returns {JSX.Element}
 */
export function ToolbarComponent(props: App): JSX.Element {
  const s = props.data.state as AppState;
  const updateState = useAppStore((state) => state.updateState);
  const { user } = useUser();
  // Modal window
  const { isOpen, onOpen, onClose } = useDisclosure();
  const toast = useToast();

  // Checkbox private selection
  const [isPrivate, setIsPrivate] = useState(false);
  const [kernelAlias, setKernelAlias] = useState<string>('');
  const [kernelName, setKernelName] = useState<string>('python3');
  const [kernelSpecs, setKernelSpecs] = useState<string[]>(s.kernelSpecs); // ['python3', 'julia-1.8', 'ir', ...]

  // This all happens when the app clicked
  useEffect(() => {
    getKernelSpecs();
  }, []);

  /**
   *
   * Fetch the list of active kernels from the backend
   *
   * @returns void
   *
   */
  const getKernelSpecs = async () => {
    try {
      const response = await fetch(`${fastApiRoute}/kernelspecs`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      // console.log(data);
      setKernelSpecs(Object.keys(data));
      if (data) {
        updateState(props._id, {
          kernelSpecs: Object.keys(data),
          online: true,
        });
        getKernelCollection();
      }
    } catch (error) {
      if (error instanceof TypeError) {
        console.log(`The Jupyter proxy server appears to be offline. (${error.message})`);
        updateState(props._id, {
          kernelSpecs: ['python3'],
          kernels: [],
          online: false,
        });
      }
    }
  };

  // Triggered on every keystroke
  function changeAlias(e: React.ChangeEvent<HTMLInputElement>) {
    const cleanAlias = e.target.value.replace(/[^a-zA-Z0-9\-_]/g, '');
    setKernelAlias(cleanAlias);
  }

  // Keyboard handler: press enter to activate command
  const onSubmit = (e: React.KeyboardEvent) => {
    // Keyboard instead of pressing the button
    if (e.key === 'Enter') {
      createKernel();
    }
  };

  /**
   * Fetch the list of active kernels from the backend
   *
   * @returns void
   */
  const getKernelCollection = async () => {
    if (!s.online) return;
    try {
      const response = await fetch(`${fastApiRoute}/collection`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
      });
      const data = await response.json();
      if (JSON.stringify(data) === JSON.stringify(s.kernels)) return;
      updateState(props._id, {
        kernels: data,
      });
      toast({
        title: 'Kernel collection updated',
        description: 'The list of kernels has been updated',
        status: 'success',
        duration: 3000,
        isClosable: true,
      });
    } catch (error) {
      console.error(error);
    }
  };

  /**
   *
   * Add a kernel to the list of kernels by sending a request to the backend
   * and updating the state. Defaults to python3 kernel. Expects a kernel alias
   * and a kernel name.
   *
   * @returns  void
   */
  const createKernel = async () => {
    if (!user || !s.online) {
      if (isOpen) onClose();
      return;
    }
    const kernelInfo = {
      kernel_id: '', // will be generated by the backend
      room: props.data.roomId,
      board: props.data.boardId,
      name: kernelName,
      alias: kernelAlias,
      is_private: isPrivate,
      owner: user._id,
    };
    try {
      const response = await fetch(`${fastApiRoute}/${kernelName}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ ...kernelInfo }),
      });
      if (response.ok) {
        getKernelCollection();
      }
    } catch (error) {
      console.error(error);
    }
    if (isOpen) onClose();
    setKernelAlias('');
    setIsPrivate(false);
  };

  return (
    <HStack>
      <Button size="xs" colorScheme="teal" onClick={onOpen}>
        Create New Kernel
      </Button>

      <ButtonGroup isAttached size="xs" colorScheme="teal">
        <Tooltip placement="top" hasArrow={true} label={'Refresh List of Kernels'} openDelay={400}>
          <Button size="xs" onClick={getKernelSpecs}>
            <MdRefresh />
          </Button>
        </Tooltip>
      </ButtonGroup>

      <Modal isOpen={isOpen} onClose={onClose} size="sm" isCentered>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Create New Kernel</ModalHeader>
          <ModalBody>
            Type
            <Select
              size="md"
              value={kernelName}
              placeholder="Select Kernel Type"
              width="100%"
              onChange={(e) => {
                setKernelName(e.target.value);
              }}
              mt="1"
            >
              {s.kernelSpecs.length > 0 ? (
                kernelSpecs.map((kernel) => (
                  <option key={kernel} value={kernel}>
                    {kernel}
                  </option>
                ))
              ) : (
                <option value="" disabled>
                  No kernels available
                </option>
              )}
            </Select>
            <Spacer my="4" />
            Alias
            <Input
              placeholder="Enter kernel alias..."
              variant="outline"
              size="md"
              mt="1"
              value={kernelAlias}
              onChange={changeAlias}
              onPaste={(event) => {
                event.stopPropagation();
              }}
              onKeyDown={onSubmit}
            />
            <Spacer my="4" />
            Private
            <Checkbox
              checked={isPrivate}
              borderRadius={2}
              verticalAlign={'middle'}
              colorScheme="teal"
              p={0}
              ml={1}
              onChange={() => setIsPrivate(!isPrivate)}
            />
          </ModalBody>

          <ModalFooter>
            <Button colorScheme="red" mr="2" onClick={onClose}>
              Cancel
            </Button>
            <Button colorScheme="teal" onClick={createKernel}>
              Create
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </HStack>
  );
}
